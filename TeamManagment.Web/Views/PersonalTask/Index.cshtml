@model TaskViewModel
@{
    ViewBag.Title = "Task Managment";
}
<!--begin::Header-->
<!--begin::Toolbar-->
<div id="kt_app_toolbar" class="app-toolbar py-3 py-lg-6">
</div>
<!--end::Toolbar-->
<div id="kt_app_content_container" class="app-container container-xxl">
    <div class="card mb-5 mb-xl-8">
        <div class="card-header border-0 pt-5" >
            <h3 class="card-title align-items-start flex-column">
                <span class="card-label fw-bold fs-3 mb-1"> Personal Task Managment </span>
                <span class="text-muted mt-1 fw-semibold fs-7">Over 500 members</span>
            </h3>

            <!--begin::Actions-->
            <div style="padding-left:420px" class="d-flex align-items-center gap-2 gap-lg-3">
                <!--begin::Filter menu-->
                <div class="m-0">
                    <!--begin::Menu toggle-->
                    <a href="#" class="btn btn-sm btn-flex bg-body btn-color-gray-700 btn-active-color-primary fw-bold" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
                        <!--begin::Svg Icon | path: icons/duotune/general/gen031.svg-->
                        <span class="svg-icon svg-icon-6 svg-icon-muted me-1">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M19.0999 3H4.72777C3.95892 3 3.47768 3.83148 3.86067 4.49814L8.56967 12.6949C9.17923 13.7559 9.5 14.9582 9.5 16.1819V19.5072C9.5 20.2189 10.2223 20.7028 10.8805 20.432L13.8805 19.1977C14.2553 19.0435 14.5 18.6783 14.5 18.273V13.8372C14.5 12.8089 14.8171 11.8056 15.408 10.964L19.8943 4.57465C20.3596 3.912 19.8856 3 19.0759 3Z" fill="currentColor" />
                            </svg>
                        </span>
                        
                        <!--end::Svg Icon-->Filter
                    </a>
                    <!--end::Menu toggle-->
                    <!--begin::Menu 1-->
                    <div class="menu menu-sub menu-sub-dropdown w-250px w-md-300px" data-kt-menu="true" id="kt_menu_63de8b3bde02f">
                        <!--begin::Header-->
                        <div class="px-7 py-5">
                            <div class="fs-5 text-dark fw-bold">Filter Options</div>
                        </div>
                        <!--end::Header-->
                        <!--begin::Menu separator-->
                        <div class="separator border-gray-200"></div>
                        <!--end::Menu separator-->
                        <!--begin::Form-->
                        <div class="px-7 py-5">
                            <!--begin::Input group-->
                            <div class="mb-10">
                                <!--begin::Label-->
                                <label class="form-label fw-semibold">Status:</label>
                                <!--end::Label-->
                                <!--begin::Input-->
                                <div>
                                    <select id="TaskFilter" class="form-select form-select-solid" data-kt-select2="true" data-placeholder="Select option" data-dropdown-parent="#kt_menu_63de8b3bde02f" data-allow-clear="true">
                                        <option value="0">All Task</option>
                                        <option value="1">Completed Task</option>
                                        <option value="2">Un Completed Task</option>
                                    </select>
                                </div>
                                <!--end::Input-->
                            </div>
                            <!--end::Input group-->
                        </div>
                        <!--end::Form-->
                    </div>
                    <!--end::Menu 1-->
                </div>
                <!--end::Filter menu-->
                <div style ="" class="card-toolbar border-0" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-trigger="hover" >
                    <a id="CreateTask" class="btn btn-sm btn-light btn-active-primary" data-popup-url="/PersonalTask/Create" data-bs-toggle="modal" data-bs-target="#kt_modal_1">
                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr075.svg-->
                        <span class="svg-icon svg-icon-3">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect opacity="0.5" x="11.364" y="20.364" width="16" height="2" rx="1" transform="rotate(-90 11.364 20.364)" fill="currentColor" />
                                <rect x="4.36396" y="11.364" width="16" height="2" rx="1" fill="currentColor" />
                            </svg>
                        </span>
                        <!--end::Svg Icon-->
                        New Task
                    </a>
                </div>
                <!--end::Primary button-->
            </div>
            <!--end::Actions-->
            <div id="popupContainer"></div>
            <div id="EditModal"></div>

        </div>
        <!--end::Header-->
        <div class="card-body py-3">
            <div class="table-responsive">
                <table id="kt_datatable_dom_positioning" class="table table-row-dashed table-row-gray-300 align-middle gs-0 gy-4">
                    <thead>
                        <tr class="fw-bold fs-6 text-gray-800 px-7">
                            <th>@Html.DisplayNameFor(x => x.Title)</th>
                            <th>@Html.DisplayNameFor(x => x.DeadLine)</th>
                            <th class="text-center">@Html.DisplayNameFor(x => x.Description)</th>
                            <th class="text-center">Is Completed</th>
                            <th class="text-center">العمليات</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts
    {
    <script src="~/datatable/datatable.js"></script>
    <script>
       var datatable = DataTable(
            "/PersonalTask/GetDataTableData",
            [
                { data: "title", name: "Title", className: "dt-right align-middle", },
                { data: "deadLine", name: "DeadLine", className: "dt-center align-middle" },
                {   data: "description",
                    name: "description", 
                    className: "dt-center align-middle",
                   
                },

                {
                    data: null,name: null,orderable: false,className: "dt-center align-middle",
                    render: function (data) {
                        return '<div class="form-check form-check-custom form-check-solid">' +
                            '<input class="status-check-input form-check-input" type="checkbox" style="margin:auto;"' +
                            (data.isCompleted == 1 ? ' checked="checked"' : '') +
                            ' />' +
                            '</div>';
                    },
                    createdCell: function (td, cellData, rowData, row, col) {
                        $(td).on('change', '.status-check-input', function () {
                            var checkbox = $(this);
                            var isChecked = checkbox.is(':checked');
                            var taskId = rowData.id;
                            // Send the request to mark task as complete/incomplete
                            Swal.fire({
                                title: 'Confirm',
                                text: 'Are you sure you want to mark this task as complete?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Yes',
                                cancelButtonText: 'No'
                            }).then(function(result){
                                if (result.isConfirmed){
                                  $.ajax({
                                    url: '/PersonalTask/MarkAsComplete/' + taskId,
                                    type: 'POST', // Change the HTTP method if necessary
                                    data: {
                                        status: isChecked ? 1 : 2,
                                        taskId: taskId
                                    },
                                    success: function (response) {
                                        // Handle the response
                                        console.log(response);
                                    },
                                    error: function (error) {
                                        // Handle the error
                                        console.log(error);
                                    }
                                });
                                }
                                 else {
                                    // Revert the checkbox change
                                    checkbox.prop('checked', !isChecked);
                                }
                            });
                        });
                    }
                },
                {
                    data: null,
                    name: null,
                    orderable: false,
                    className: "dt-center align-middle",
                    render: function (data) {
                        //href='/PersonalTask/Update/" + data.id + "'
                        return "<div data-EditId-id='" + data.id + "'class='btn btn-icon  btn-bg-light btn-active-color-primary btn-sm me-1 editEmployeeButton' type = 'button' data-bs-toggle='modal' data-bs-target='#taskEditModel' >" +
                                "<span class='svg-icon svg-icon-2' >" +
                                `<i class="fa-solid fa-pen-to-square"></i>` +
                                "</span>" +
                                "</div>"+
                                "<a id='deleteButton_" + data.id + "'class='btn btn-icon  btn-bg-light btn-active-color-primary btn-sm me-1 delete' data-delete-url='/PersonalTask/Delete/'>" +
                                "<span class='svg-icon svg-icon-2'>" +
                                `<i class="fa-solid fa-trash-can"></i>` +
                                "</span>" +
                                "</a>";
                    },
                }
            ],
        );
        $(document).on("click", ".editEmployeeButton", function () {
            let modelId = $(this).closest("div[data-EditId-id]").attr("data-EditId-id");
            $.ajax(
                {
                    url: "/PersonalTask/Update/" + modelId,
                    success: function (result) {
                        $(".modal-backdrop.show").remove();
                        $(".modal-content").html(result);
                        $("#EditModel").modal("show");
                    }
                });
            return false;
        });
         

        // Function to handle delete confirmation
        function DeleteItem() {
            var deleteUrl = $(this).data('delete-url');
            var id = $(this).attr('id').split('_')[1];

            Swal.fire({
                title: 'Are you sure?',
                text: `You are about to delete This Task with ID: ${id}`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                cancelButtonText: 'No'
            }).then((result) => {
                if (result.isConfirmed) {
                    // User clicked "Yes"
                    $.ajax({
                        url: deleteUrl + id,
                        type: 'Get',
                        success: function (response) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: `This Task with ID: ${id} has been deleted.`,
                                icon: 'success',
                                showConfirmButton: true,
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Perform any additional action after the confirmation alert is closed
                                datatable.ajax.reload();
                            });
                        },
                        error: function (xhr, status, error) {
                            Swal.fire('Error', 'An error occurred while deleting the Task.', 'error');
                        }
                    });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    // User clicked "No" or closed the dialog
                    Swal.fire('Cancelled', `Deletion of Task with ID: ${id} was cancelled.`, 'info');
                }
            });
        }
        // Add event listener to delete buttons
        $(document).on('click', '[id^="deleteButton_"]', DeleteItem);
        function _funAfterGetData() {
            $('.status-check-input').change(function () {
                let me = this;
                if (me.checked) {
                    $.ajax(
                        {
                            url: me.dataset.action + "1"
                        });
                }
                else {
                    $.ajax(
                        {
                            url: me.dataset.action + "2"
                        });
                }
            });

            $('.onSale-check-input').change(function () {
                let me = this;
                if (me.checked) {
                    $.ajax(
                        {
                            url: me.dataset.action + true
                        });
                }
                else {
                    $.ajax(
                        {
                            url: me.dataset.action + false
                        });
                }
            });
        }
        $('#TaskFilter').on('change', function () {
            // Redraw the DataTable
            datatable.ajax.reload();
        });
    </script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.js"></script>


    <script>
        $(document).ready(function () {
                $('#CreateTask').click(function (e) {
                e.preventDefault();
                var popupUrl = $(this).data('popup-url');
                $.ajax({
                    url: popupUrl,
                    type: 'GET',
                    success: function (result) {
                        $('.modal-content').html(result);
                        $('#EditModel').modal('show');
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            });
        });
    </script>
}